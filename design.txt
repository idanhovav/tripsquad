One account per person. An account must have a name, email address, and password. The email address must be unique. Upon creation of an account, an account will be given a GUID. The password will be hashed and stored. Future improvement: Allow accounts to be created by others without a password and assigned purchases on a trip. Those accounts can then in the future be "claimed" by the person with that email address.

A trip consists of one or more people (squad) and a set of purchases. Each purchase must be made by one person on the trip. 

A purchase consists of a person and a dollar amount, and represents a purchase made by that person for that given dollar amount. Purchases can optionally have a tag, description, and are given a timestamp

storing totalPurchaseAmt per trip member. Update it every time creating a new purchase?

TODO:
create README
allow removal of purchases
allow addition of people to a trip
allow getting total per person
allow getting payments between people on a trip to get total
allow putting a tag on a purchase
create actual database
put endpoint functions as lambda functions on AWS
use AWS API gateway instead of flask
make createObject function in each class file
create utils file for interacting with db
test database for correct values in testAPI
create base Object class that's extended by custom objects
find some atomicity solution for db transactions that have multiple parts:
	- creating a purchase & updating a TripMember's total
	- creating a trip and tripMembers
check uniqueness of Account email before account creation
find better authentication format for endpoints
	- dont send password in plaintext
	- allow cookies?
